[{"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\index.js":"1","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\App.js":"2","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\pages\\Home.jsx":"3","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\FormGroup\\FormGroup.jsx":"4","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\InputGroup\\InputGroup.jsx":"5","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\pages\\Main.jsx":"6","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\View\\View.jsx":"7","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\SubjectCard\\SubjectCard.jsx":"8","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\Painel\\Painel.jsx":"9","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Boxplot\\Boxplot.jsx":"10","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Violin\\Violin.jsx":"11","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Scatter\\Scatter.jsx":"12","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Table\\Table.jsx":"13","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Histogram\\Histogram.jsx":"14","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\SubjectImage\\SubjectImage.jsx":"15","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\ConfigModal\\ConfigModal.jsx":"16"},{"size":244,"mtime":1666563016990,"results":"17","hashOfConfig":"18"},{"size":235,"mtime":1666564674849,"results":"19","hashOfConfig":"18"},{"size":2967,"mtime":1666564216651,"results":"20","hashOfConfig":"18"},{"size":352,"mtime":1666564186418,"results":"21","hashOfConfig":"18"},{"size":691,"mtime":1666564146953,"results":"22","hashOfConfig":"18"},{"size":4111,"mtime":1667530590080,"results":"23","hashOfConfig":"18"},{"size":5126,"mtime":1667838738570,"results":"24","hashOfConfig":"18"},{"size":223,"mtime":1666486574469,"results":"25","hashOfConfig":"18"},{"size":2329,"mtime":1666501812194,"results":"26","hashOfConfig":"18"},{"size":925,"mtime":1666556881679,"results":"27","hashOfConfig":"18"},{"size":1031,"mtime":1666559753988,"results":"28","hashOfConfig":"18"},{"size":1000,"mtime":1666561296942,"results":"29","hashOfConfig":"18"},{"size":4874,"mtime":1666555215219,"results":"30","hashOfConfig":"18"},{"size":1040,"mtime":1666560861049,"results":"31","hashOfConfig":"18"},{"size":541,"mtime":1666549235014,"results":"32","hashOfConfig":"18"},{"size":1686,"mtime":1667838121755,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"m5sqij",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\index.js",[],["74","75"],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\App.js",["76"],"import './styles/global.scss'\r\n\r\nimport Home from './pages/Home'\r\nimport Main from './pages/Main';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        \r\n        <Main />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\pages\\Home.jsx",["77"],"import React, {useState} from 'react'\r\nimport reactDom from 'react-dom'\r\nimport InputGroup from '../components/InputGroup/InputGroup'\r\nimport FormGroup from '../components/FormGroup/FormGroup'\r\nimport '../styles/home.scss'\r\n\r\n\r\nfunction Home() {\r\n\r\n    const [groups, setGroups] = useState([])\r\n\r\n    function addGroup(){\r\n        let groupContainer = document.querySelector('#formGroups')\r\n\r\n        let number = groups.length\r\n        let newGroup = InputGroup({id: number})\r\n        groups.push(newGroup)\r\n        setGroups(groups)\r\n\r\n        let Group = FormGroup({groups: groups})\r\n        reactDom.render(Group, groupContainer)\r\n    }\r\n\r\n    function start(){\r\n        let path = document.querySelector(\"#path\").value\r\n        let type = document.querySelector(\"#type\").value\r\n        console.log(path, type)\r\n        window.callTool(`${path}`, `${type}`)\r\n    }\r\n\r\n    return (\r\n        <div id=\"home-container\">\r\n            \r\n            <div className=\"home-left\">\r\n\r\n                <div className=\"home-left-cape\">\r\n    \r\n                    <h2 className='home-name'>InCCsight</h2>\r\n                    <span className='home-slogan'>Analyze, Explore and Visualize</span>\r\n                    <span className='home-descript'>The software to automate and facilitate the processing of your DTI data.</span>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"home-right\">\r\n\r\n                <div className=\"social-field\">\r\n\r\n                </div>\r\n\r\n                <span className=\"home-phrase\">We hope will help with your research</span>\r\n\r\n                <div className=\"input-field\">\r\n\r\n                    <div className=\"input-group\">\r\n                        <label>Type Input</label>\r\n                        <select id=\"type\">\r\n                            <option value=\"-f\">Single Subjects</option>\r\n                            <option value=\"-p\">Groups</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div id=\"formGroups\">\r\n\r\n                        <div className='path-group'>\r\n\r\n                            <div className='input-group-path'>\r\n                                <label className='label-input'>Folder path</label>\r\n                                <input type='text' className='inputText' placeholder='Ex: C:\\Users\\User\\Desktop\\Study\\Male' id=\"path\" required/>\r\n                            </div>\r\n\r\n                            <div className='input-group-name'>\r\n                                <label className='label-input'>Group name</label>\r\n                                <input type='text' className='inputText' placeholder=\"Ex: Man's\" id=\"name\"/>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <button className='btn-start' onClick={start}>Start</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\FormGroup\\FormGroup.jsx",[],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\InputGroup\\InputGroup.jsx",[],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\pages\\Main.jsx",["78"],"import React, {useState} from 'react'\r\nimport SubjectCard from '../components/SubjectCard/SubjectCard'\r\nimport View from '../components/View/View'\r\nimport {BsGear} from 'react-icons/bs'\r\nimport { createRoot } from 'react-dom/client';\r\n\r\n\r\nimport '../styles/main.scss'\r\nimport ConfigModal from '../components/ConfigModal/ConfigModal';\r\n\r\nconst subjects = ['subject_0', 'subject_1', 'subject_2', 'subject_3', 'subject_4', 'subject_5', 'subject_6', 'subject_7', 'subject_8', 'subject_9', 'subject_10', 'subject_11', 'subject_12', 'subject_13', 'subject_14', 'subject_15', 'subject_16', 'subject_17', 'subject_18', 'subject_19', 'subject_20', 'subject_21', 'subject_22', 'subject_23', 'subject_24', 'subject_25', 'subject_26', 'subject_27', 'subject_28', 'subject_29', 'subject_30', 'subject_31', 'subject_32', 'subject_33', 'subject_34', 'subject_35', 'subject_36', 'subject_37', 'subject_38', 'subject_39', 'subject_40', 'subject_41', 'subject_42', 'subject_43', 'subject_44', 'subject_45', 'subject_46', 'subject_47', 'subject_48', 'subject_49']\r\n\r\nfunction showConfigs(){\r\n    const container = document.querySelector('#modalArea');\r\n    const root = createRoot(container); // createRoot(container!) if you use TypeScript\r\n\r\n    root.render(<ConfigModal root={root}/>)\r\n}\r\n\r\nfunction Main() {\r\n    \r\n    const [filter, setFilter] = useState(\"\")\r\n\r\n    function filterSubject(){\r\n        let value = document.querySelector(\"#filter\").value\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n\r\n            <div id=\"modalArea\">\r\n\r\n            </div>\r\n\r\n            <div className='header'>\r\n\r\n                <div className='banner'>   \r\n\r\n                    <div className='img-logo'></div>\r\n\r\n                    <span className='banner-span'>This is data exploration and visualization tool for diffusion tensor images of the corpus callosum. Upload data folders to begin. Further information can be found here.</span>\r\n\r\n                    <div className='banner-selects'>\r\n\r\n                        <div className='input-group'>\r\n                            <label>Category: </label>\r\n                            <select>\r\n                                <option>Method</option>\r\n                                <option>Folder</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className='input-group'>\r\n                            <label>Segm. Method: </label>\r\n                            <select>\r\n                                <option>ROQS</option>\r\n                                <option>Watershed</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <button className='btn-check'>Check Quality [0]</button>\r\n\r\n                </div>\r\n\r\n                <div className='subjects-list'>\r\n\r\n                    <label>Subjects</label>\r\n\r\n                    <input placeholder='E.g: Subject_00002' id=\"filter\" onChange={filterSubject}/>\r\n\r\n                    <div className='subjects'>\r\n\r\n                        {subjects.map((subject, index) => {\r\n                            if(subject.includes(filter)){\r\n                                return(\r\n                                    <SubjectCard name={subject} key={index}/>\r\n                                )\r\n                            }\r\n                        })}\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <div className='square-field'>\r\n                    <div>\r\n                        <span className=\"qnt\">{subjects.length}</span>\r\n                        <span className=\"label\">Subjects</span>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"qnt\">1</span>\r\n                        <span className=\"label\">Folders</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <BsGear className='gear-icon' onClick={showConfigs}/>\r\n\r\n            </div>\r\n\r\n            <View />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\View\\View.jsx",["79"],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\SubjectCard\\SubjectCard.jsx",[],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\Painel\\Painel.jsx",["80"],"import React, {useState} from 'react'\r\nimport SubjectImage from '../../graphs/SubjectImage/SubjectImage'\r\nimport './Painel.scss'\r\n\r\nfunction Painel(props) {\r\n    \r\n    const [method, setMethod] = useState(\"ROQS\")\r\n\r\n    function changeTab(name){\r\n        let tabRoqs = document.querySelector(\"#tab_ROQS\")\r\n        let tabWatershed = document.querySelector(\"#tab_Watershed\")\r\n        if(name == \"ROQS\"){\r\n            tabRoqs.classList.add(\"active\")\r\n            tabWatershed.classList.remove(\"active\")\r\n            setMethod(\"ROQS\")\r\n        } else{\r\n            tabRoqs.classList.remove(\"active\")\r\n            tabWatershed.classList.add(\"active\")\r\n            setMethod(\"Watershed\")\r\n        }\r\n    }\r\n\r\n    function closePainel(){\r\n        let painel = document.querySelector(\"#painel-container\")\r\n        painel.style.display = \"None\"\r\n    }\r\n\r\n    return (\r\n        <div id='painel-container'>\r\n\r\n            <div className='painel-header'>\r\n\r\n                <div className='row'>\r\n                    <span className='painel-title'>Quality Evaluation</span>\r\n                    <span className='close-icon' onClick={closePainel}>X</span>                    \r\n                </div>\r\n\r\n                <div className='input-group'>\r\n                    \r\n                    <label>Threshold: </label>\r\n                    <select>\r\n                        <option>0.3</option>\r\n                        <option>0.4</option>\r\n                        <option>0.5</option>\r\n                        <option>0.6</option>\r\n                        <option>0.7</option>\r\n                    </select>\r\n\r\n                    <button>REMOVE SELECTED</button>\r\n\r\n                </div>\r\n\r\n                <div className='painel-tabs'>\r\n                    <span id=\"tab_ROQS\" className='tab active' onClick={() => changeTab(\"ROQS\")}>ROQS</span>\r\n                    <span id=\"tab_Watershed\" className='tab' onClick={() => changeTab(\"Watershed\")}>Watershed</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className='painel-body'>\r\n\r\n                {props.subjects[method].map((subject) => {\r\n                    return(\r\n                        <SubjectImage name={subject} method={method}/>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Painel","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Boxplot\\Boxplot.jsx",["81","82"],"import React from 'react'\r\nimport Plot from 'react-plotly.js'\r\n\r\nimport './Boxplot.scss'\r\n\r\nvar y0 = [];\r\nvar y1 = [];\r\nfor (var i = 0; i < 50; i ++) {\r\n\ty0[i] = Math.random();\r\n\ty1[i] = Math.random() + 1;\r\n}\r\n\r\nfunction getSize(size){\r\n    let sizes = []\r\n    if(size == \"small\"){\r\n        sizes = [420, 190]\r\n    } else if(size == \"medium\"){\r\n        sizes = [420, 240]\r\n    }\r\n    return sizes\r\n}\r\n\r\nfunction Boxplot(props) {\r\n\r\n    let data = [{\r\n        y: y0,\r\n        type: \"box\",\r\n        name: \"Watershed\"\r\n    }, {\r\n        y: y1,\r\n        type: \"box\",\r\n        name: \"ROQS\"\r\n    }\r\n    ]\r\n    let sizes = getSize(props.size)\r\n\r\n    let layout = {title: props.title, height: sizes[0], width: sizes[1], margin: {l: 10, r: 10}, legend: {orientation: \"h\"}}\r\n\r\n    return (\r\n        <div className='boxplot-field'>\r\n\r\n            <Plot data={data} layout={layout}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Boxplot","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Violin\\Violin.jsx",[],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Scatter\\Scatter.jsx",[],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Table\\Table.jsx",["83","84","85","86","87","88","89","90","91"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport './Table.scss'\r\n\r\nfunction Table(props) {\r\n\r\n    const [method, setMethod] = useState(\"Chao\")\r\n    let size = Object.keys(props.data).length\r\n    \r\n    function getDataSegmentation(dict){\r\n        let keys = Object.keys(dict)\r\n\r\n        let cols = []\r\n        let col1 = []\r\n\r\n        for(let i = 0; i != keys.length; i++){\r\n            col1.push(keys[i])\r\n        }\r\n        cols.push(col1)        \r\n\r\n        for(let i = 0; i != dict[keys[0]].length; i++){\r\n            let col = []\r\n            for(let j = 0; j != keys.length; j++){\r\n                let value = dict[keys[j]][i]\r\n                col.push(value)\r\n            }\r\n            cols.push(col)\r\n        }\r\n\r\n        return cols\r\n    }\r\n\r\n    function getDataParcellation(dict, method){\r\n        let keys = Object.keys(dict)\r\n        let methods = Object.keys(dict[keys[0]])\r\n\r\n        let cols = []\r\n        let col1 = []\r\n\r\n\r\n        for(let i = 0; i != keys.length; i++){\r\n            col1.push(keys[i])\r\n        }\r\n\r\n        cols.push(col1)        \r\n\r\n        for(let j = 0; j != dict[keys[0]][methods[0]].length; j++){\r\n            let col = []\r\n            for(let i = 0; i != col1.length; i++){\r\n                let value = dict[keys[i]][method][j]\r\n                col.push(value)\r\n            }\r\n            cols.push(col)\r\n        }\r\n\r\n        return cols\r\n    }\r\n\r\n    function changeMethod(){\r\n        let value = document.querySelector(\"#methodSelect\").value\r\n        setMethod(value)\r\n    }\r\n\r\n    let data = [{\r\n        type: \"table\",\r\n        header: {\r\n            values: props.headers.map((name) => {return(`<b>${name}</b>`)}),\r\n            line: {width: 1, color: 'black'},\r\n        },\r\n        cells: {\r\n            values: props.type == \"segmentation\" ? getDataSegmentation(props.data) : getDataParcellation(props.data, method),\r\n            height: 30,\r\n            align: [\"center\", \"center\"],\r\n            line: {width: 1, color: 'black'},\r\n    \r\n        }\r\n    }]\r\n\r\n    let layout = {height: size * 55,margin: {t: 10, b: 2, l: 10, r: 10}}\r\n\r\n    if(props.type == \"segmentation\"){\r\n        return (\r\n            <div className='table-field'>\r\n                \r\n                <div className='table-row'>\r\n                    <span className='table-title'>{props.title}</span>\r\n                    <button className='btn-export'>Export</button>\r\n                </div>\r\n    \r\n                <Plot data={data} layout={layout}/>\r\n    \r\n                <div className='options-row'>  \r\n    \r\n                    <div className='select-group'>\r\n                        <label>Mode: </label>\r\n                        <select>\r\n                            <option>Overall</option>\r\n                        </select>\r\n                    </div>\r\n    \r\n                    <div className='select-group'>\r\n                        <label>Std. Dev: </label>\r\n                        <select>\r\n                            <option>Hide</option>\r\n                        </select>\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )            \r\n    } else if(props.type == \"parcellation\"){\r\n        return (\r\n            <div className='table-field'>\r\n                \r\n                <div className='table-row'>\r\n                    <span className='table-title'>{props.title}</span>\r\n                    <button className='btn-export'>Export</button>\r\n                </div>\r\n    \r\n                <Plot data={data} layout={layout}/>\r\n    \r\n                <div className='options-row'>  \r\n    \r\n                    <div className='select-group'>\r\n                        <label>Mode: </label>\r\n                        <select>\r\n                            <option>Overall</option>\r\n                        </select>\r\n                    </div>\r\n    \r\n                    <div className='select-group'>\r\n                        <label>Parcellation Method: </label>\r\n                        <select id=\"methodSelect\" onChange={changeMethod}>\r\n                            {props.methods.map((method, index) => {\r\n                                return(\r\n                                    <option value={method} key={index}>{method}</option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className='select-group'>\r\n                        <label>Scalar: </label>\r\n                        <select>\r\n                            <option>FA</option>\r\n                            <option>RD</option>\r\n                            <option>AD</option>\r\n                            <option>MD</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                </div>\r\n    \r\n            </div>\r\n        )    \r\n    }\r\n}\r\n\r\nexport default Table","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\Histogram\\Histogram.jsx",[],"C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\graphs\\SubjectImage\\SubjectImage.jsx",["92","93"],"import React from 'react'\r\nimport './SubjectImage.scss'\r\n\r\nimport Plot from 'react-plotly.js';\r\n\r\n\r\nfunction SubjectImage(props) {\r\n\r\n    return (\r\n        <div className='subjectImage-container'>\r\n            \r\n            <span>\r\n                <input type=\"checkbox\"/> \r\n                {props.name} - Method: {props.method}\r\n            </span>\r\n\r\n            <img src='https://www.valleyradiologync.com/sites/default/files/brain-scan-MRI-500x282.png' className='img-subject'/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubjectImage","C:\\Users\\Usuario\\Desktop\\Reinccsight\\project\\src\\components\\ConfigModal\\ConfigModal.jsx",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":12},{"ruleId":"98","severity":1,"message":"102","line":12,"column":14,"nodeType":"100","messageId":"101","endLine":12,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":76,"column":56,"nodeType":"105","messageId":"106","endLine":76,"endColumn":58},{"ruleId":"98","severity":1,"message":"107","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":12,"column":17,"nodeType":"110","messageId":"111","endLine":12,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":15,"column":13,"nodeType":"110","messageId":"111","endLine":15,"endColumn":15},{"ruleId":"108","severity":1,"message":"109","line":17,"column":20,"nodeType":"110","messageId":"111","endLine":17,"endColumn":22},{"ruleId":"108","severity":1,"message":"112","line":16,"column":26,"nodeType":"110","messageId":"111","endLine":16,"endColumn":28},{"ruleId":"108","severity":1,"message":"112","line":21,"column":26,"nodeType":"110","messageId":"111","endLine":21,"endColumn":28},{"ruleId":"108","severity":1,"message":"112","line":23,"column":30,"nodeType":"110","messageId":"111","endLine":23,"endColumn":32},{"ruleId":"108","severity":1,"message":"112","line":41,"column":26,"nodeType":"110","messageId":"111","endLine":41,"endColumn":28},{"ruleId":"108","severity":1,"message":"112","line":47,"column":26,"nodeType":"110","messageId":"111","endLine":47,"endColumn":28},{"ruleId":"108","severity":1,"message":"112","line":49,"column":30,"nodeType":"110","messageId":"111","endLine":49,"endColumn":32},{"ruleId":"108","severity":1,"message":"109","line":71,"column":32,"nodeType":"110","messageId":"111","endLine":71,"endColumn":34},{"ruleId":"108","severity":1,"message":"109","line":81,"column":19,"nodeType":"110","messageId":"111","endLine":81,"endColumn":21},{"ruleId":"108","severity":1,"message":"109","line":112,"column":26,"nodeType":"110","messageId":"111","endLine":112,"endColumn":28},{"ruleId":"98","severity":1,"message":"113","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":12},{"ruleId":"114","severity":1,"message":"115","line":17,"column":13,"nodeType":"116","endLine":17,"endColumn":130},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'addGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Violin' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Plot' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]