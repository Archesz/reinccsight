[{"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\index.js":"1","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\App.js":"2","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\pages\\Home.jsx":"3","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\pages\\Main.jsx":"4","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\FormGroup\\FormGroup.jsx":"5","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\InputGroup\\InputGroup.jsx":"6","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\SubjectCard\\SubjectCard.jsx":"7","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\View\\View.jsx":"8","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\ConfigModal\\ConfigModal.jsx":"9","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\Painel\\Painel.jsx":"10","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Table\\TableSegmentation.jsx":"11","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Table\\TableParcellation.jsx":"12","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Boxplot\\Boxplot.jsx":"13","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Boxplot\\BoxplotSegmentation.jsx":"14","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Boxplot\\BoxplotParcellation.jsx":"15","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Scatter\\Scatter.jsx":"16","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Line\\Midline.jsx":"17","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Radar\\Radar.jsx":"18","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\InfoTool\\InfoTool.jsx":"19"},{"size":244,"mtime":1666563016990,"results":"20","hashOfConfig":"21"},{"size":235,"mtime":1666564674849,"results":"22","hashOfConfig":"21"},{"size":2967,"mtime":1666564216651,"results":"23","hashOfConfig":"21"},{"size":5454,"mtime":1672935399839,"results":"24","hashOfConfig":"21"},{"size":352,"mtime":1666564186418,"results":"25","hashOfConfig":"21"},{"size":691,"mtime":1666564146953,"results":"26","hashOfConfig":"21"},{"size":281,"mtime":1669656050883,"results":"27","hashOfConfig":"21"},{"size":8037,"mtime":1669869572402,"results":"28","hashOfConfig":"21"},{"size":1895,"mtime":1669653272484,"results":"29","hashOfConfig":"21"},{"size":2155,"mtime":1672858068486,"results":"30","hashOfConfig":"21"},{"size":3014,"mtime":1672933971628,"results":"31","hashOfConfig":"21"},{"size":3842,"mtime":1672932371531,"results":"32","hashOfConfig":"21"},{"size":899,"mtime":1669872214028,"results":"33","hashOfConfig":"21"},{"size":1352,"mtime":1669872291852,"results":"34","hashOfConfig":"21"},{"size":3657,"mtime":1669873043341,"results":"35","hashOfConfig":"21"},{"size":4342,"mtime":1669909107187,"results":"36","hashOfConfig":"21"},{"size":3139,"mtime":1669830261255,"results":"37","hashOfConfig":"21"},{"size":2996,"mtime":1669948799155,"results":"38","hashOfConfig":"21"},{"size":244,"mtime":1672772836031,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"e8m9k6",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\index.js",[],["90","91"],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\App.js",["92"],"import './styles/global.scss'\r\n\r\nimport Home from './pages/Home'\r\nimport Main from './pages/Main';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        \r\n        <Main />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\pages\\Home.jsx",["93"],"import React, {useState} from 'react'\r\nimport reactDom from 'react-dom'\r\nimport InputGroup from '../components/InputGroup/InputGroup'\r\nimport FormGroup from '../components/FormGroup/FormGroup'\r\nimport '../styles/home.scss'\r\n\r\n\r\nfunction Home() {\r\n\r\n    const [groups, setGroups] = useState([])\r\n\r\n    function addGroup(){\r\n        let groupContainer = document.querySelector('#formGroups')\r\n\r\n        let number = groups.length\r\n        let newGroup = InputGroup({id: number})\r\n        groups.push(newGroup)\r\n        setGroups(groups)\r\n\r\n        let Group = FormGroup({groups: groups})\r\n        reactDom.render(Group, groupContainer)\r\n    }\r\n\r\n    function start(){\r\n        let path = document.querySelector(\"#path\").value\r\n        let type = document.querySelector(\"#type\").value\r\n        console.log(path, type)\r\n        window.callTool(`${path}`, `${type}`)\r\n    }\r\n\r\n    return (\r\n        <div id=\"home-container\">\r\n            \r\n            <div className=\"home-left\">\r\n\r\n                <div className=\"home-left-cape\">\r\n    \r\n                    <h2 className='home-name'>InCCsight</h2>\r\n                    <span className='home-slogan'>Analyze, Explore and Visualize</span>\r\n                    <span className='home-descript'>The software to automate and facilitate the processing of your DTI data.</span>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"home-right\">\r\n\r\n                <div className=\"social-field\">\r\n\r\n                </div>\r\n\r\n                <span className=\"home-phrase\">We hope will help with your research</span>\r\n\r\n                <div className=\"input-field\">\r\n\r\n                    <div className=\"input-group\">\r\n                        <label>Type Input</label>\r\n                        <select id=\"type\">\r\n                            <option value=\"-f\">Single Subjects</option>\r\n                            <option value=\"-p\">Groups</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div id=\"formGroups\">\r\n\r\n                        <div className='path-group'>\r\n\r\n                            <div className='input-group-path'>\r\n                                <label className='label-input'>Folder path</label>\r\n                                <input type='text' className='inputText' placeholder='Ex: C:\\Users\\User\\Desktop\\Study\\Male' id=\"path\" required/>\r\n                            </div>\r\n\r\n                            <div className='input-group-name'>\r\n                                <label className='label-input'>Group name</label>\r\n                                <input type='text' className='inputText' placeholder=\"Ex: Man's\" id=\"name\"/>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <button className='btn-start' onClick={start}>Start</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\pages\\Main.jsx",["94","95","96","97","98","99"],"import React, {useState} from 'react'\r\n\r\n/* Data */\r\nimport subjects from '../data/mydata.json'\r\n\r\n/* Imagens */\r\nimport logo from '../assets/images/inccsight.png'\r\nimport unicamp from '../assets/images/unicamp.png'\r\nimport miclab from '../assets/images/miclab.png'\r\n\r\n/* Componentes */\r\nimport SubjectCard from '../components/SubjectCard/SubjectCard'\r\nimport ConfigModal from '../components/ConfigModal/ConfigModal'\r\nimport TableSegmentation from '../graphs/Table/TableSegmentation'\r\nimport TableParcellation from '../graphs/Table/TableParcellation'\r\nimport BoxplotSegmentation from '../graphs/Boxplot/BoxplotSegmentation'\r\nimport BoxplotParcellation from '../graphs/Boxplot/BoxplotParcellation'\r\nimport Scatter from '../graphs/Scatter/Scatter'\r\nimport Midline from '../graphs/Line/Midline'\r\n\r\n/* Icones */\r\nimport {BsGear} from 'react-icons/bs'\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport '../styles/main.scss'\r\nimport Radar from '../graphs/Radar/Radar'\r\nimport Painel from '../components/Painel/Painel'\r\n\r\nfunction showConfigs(){\r\n    const container = document.querySelector('#modalArea');\r\n    const root = createRoot(container); // createRoot(container!) if you use TypeScript\r\n\r\n    root.render(<ConfigModal root={root}/>)\r\n}\r\n\r\nfunction Main() {\r\n    \r\n    const [filter, setFilter] = useState(\"\")\r\n    const [data, setData] = useState(subjects)\r\n\r\n    function filterSubject(){\r\n        let value = document.querySelector(\"#filter\").value\r\n        setFilter(value)\r\n    }\r\n\r\n    /* Função que seleciona um sujeito com o Card */\r\n\r\n    function selectSubject(name){\r\n        if(name == \"All\"){\r\n            setData(subjects)\r\n        } else{\r\n            const selecteds = []\r\n            data.map((subject) => {if(subject[\"Id\"] == name){\r\n                selecteds.push(subject);\r\n            }})\r\n            setData(selecteds);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            \r\n            <div id=\"modalArea\">\r\n            </div>\r\n\r\n            <div className='header'>\r\n\r\n                <div className='banner'>   \r\n\r\n                    <div className='banner-logos'>\r\n                        <img src={unicamp} alt=\"\" className='banner-logo'/>\r\n                        <img src={miclab} alt=\"\" className='banner-logo'/>\r\n                    </div>\r\n\r\n                    <img src={logo} className=\"img-logo\"/>\r\n\r\n                    <span className='banner-span'>This is data exploration and visualization tool for diffusion tensor images of the corpus callosum. Upload data folders to begin. Further information can be found here.</span>\r\n\r\n                    <div className='banner-selects'>\r\n\r\n                        <div className='input-group'>\r\n                            <label>Category: </label>\r\n                            <select>\r\n                                <option>Method</option>\r\n                                <option>Folder</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className='input-group'>\r\n                            <label>Segm. Method: </label>\r\n                            <select>\r\n                                <option>ROQS</option>\r\n                                <option>Watershed</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <button className='btn-check'>Check Quality <span className='btn-tag'>0</span></button>\r\n\r\n                </div>\r\n\r\n                <div className='subjects-list'>\r\n\r\n                    <label>Subjects</label>\r\n\r\n                    <input placeholder='E.g: Subject_00002' id=\"filter\" onChange={filterSubject}/>\r\n\r\n                    <div className='subjects'>  \r\n                        <SubjectCard name=\"All\" onClick={selectSubject}/>\r\n\r\n                        {data.map((subject, index) => {\r\n                            if(subject[\"Id\"].includes(filter)){\r\n                                return(\r\n                                    <SubjectCard name={subject[\"Id\"]} id={index} key={index} onClick={selectSubject}/>\r\n                                )\r\n                            }\r\n                        })}\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <div className='square-field'>\r\n                    <div>\r\n                        <span className=\"qnt\">{data.length}</span>\r\n                        <span className=\"label\">Subjects</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <BsGear className='gear-icon' onClick={showConfigs}/>\r\n\r\n            </div>\r\n\r\n            <div className='area-view'>\r\n            \r\n                <div className='area-table'>\r\n                    <TableSegmentation data={data}/>\r\n                    <TableParcellation data={data}/>\r\n                </div>\r\n                    \r\n                <div className='area-boxplot'>\r\n                    <BoxplotSegmentation data={data} />\r\n                    <BoxplotParcellation data={data} />\r\n                </div>\r\n\r\n                <div className='area-scatter'>\r\n                    <Scatter data={data}/>\r\n                </div>\r\n\r\n                <div className='area-midline'>\r\n                    <Midline data={data}/>\r\n                    <Radar data={data}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\FormGroup\\FormGroup.jsx",[],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\InputGroup\\InputGroup.jsx",[],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\SubjectCard\\SubjectCard.jsx",[],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\View\\View.jsx",["100","101","102","103","104","105","106"],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\ConfigModal\\ConfigModal.jsx",[],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\Painel\\Painel.jsx",["107","108"],"import React, {useState} from 'react'\r\nimport './Painel.scss'\r\n\r\nfunction Painel(props) {\r\n    \r\n    const [method, setMethod] = useState(\"ROQS\")\r\n\r\n    function changeTab(name){\r\n        let tabRoqs = document.querySelector(\"#tab_ROQS\")\r\n        let tabWatershed = document.querySelector(\"#tab_Watershed\")\r\n        if(name == \"ROQS\"){\r\n            tabRoqs.classList.add(\"active\")\r\n            tabWatershed.classList.remove(\"active\")\r\n            setMethod(\"ROQS\")\r\n        } else{\r\n            tabRoqs.classList.remove(\"active\")\r\n            tabWatershed.classList.add(\"active\")\r\n            setMethod(\"Watershed\")\r\n        }\r\n    }\r\n\r\n    function closePainel(){\r\n        let painel = document.querySelector(\"#painel-container\")\r\n        let call = document.querySelector(\"#painel-call\")\r\n        painel.style.display = \"None\"\r\n        call.style.display = \"flex\"\r\n    }\r\n\r\n    return (\r\n        <div id='painel-container'>\r\n\r\n            <div className='painel-header'>\r\n\r\n                <div className='row'>\r\n                    <span className='painel-title'>Quality Evaluation</span>\r\n                    <span className='close-icon' onClick={closePainel}>X</span>                    \r\n                </div>\r\n\r\n                <div className='input-group'>\r\n                    \r\n                    <label>Threshold: </label>\r\n                    <select>\r\n                        <option>0.3</option>\r\n                        <option>0.4</option>\r\n                        <option>0.5</option>\r\n                        <option>0.6</option>\r\n                        <option>0.7</option>\r\n                    </select>\r\n\r\n                    <button>REMOVE SELECTED</button>\r\n\r\n                </div>\r\n\r\n                <div className='painel-tabs'>\r\n                    <span id=\"tab_ROQS\" className='tab active' onClick={() => changeTab(\"ROQS\")}>ROQS</span>\r\n                    <span id=\"tab_Watershed\" className='tab' onClick={() => changeTab(\"Watershed\")}>Watershed</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className='painel-body'>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Painel","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Table\\TableSegmentation.jsx",["109","110","111"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport InfoTool from '../../components/InfoTool/InfoTool'\r\nimport './TableSegmentation.scss'\r\n\r\nfunction getMeanValues(subjects, method, scalar){\r\n    let value = 0\r\n    subjects.map((subject) => {\r\n        return(\r\n            value += subject[method][scalar]\r\n        )\r\n    })\r\n\r\n    value /= (subjects.length);\r\n    return value.toFixed(6)\r\n}\r\n\r\nfunction TableSegmentation(props) {\r\n\r\n    const [show, setShow] = useState(\"hide\")\r\n\r\n    function changeShow(){\r\n        let value = document.querySelector(\"#show\").value\r\n        setShow(value)\r\n    }\r\n\r\n    let headers = []\r\n    /* Selecionando os dados */\r\n    let subjects = props.data\r\n    if(show == \"show\"){\r\n        headers = [\"Method\", \"FA\", \"FA StdDev\",\"MD\", \"MD StdDev\", \"RD\", \"RD StdDev\", \"AD\", \"AD StdDev\"]\r\n    } else if(show == \"hide\"){\r\n        headers = [\"Method\", \"FA\", \"MD\", \"RD\", \"AD\"]\r\n    }\r\n\r\n    let cols = [[\"ROQS\", \"Watershed\", \"Joany\"]]\r\n\r\n    for(let i = 1; i != headers.length; i++){\r\n        let v1 = getMeanValues(subjects, \"ROQS_scalar\", headers[i])\r\n        let v2 = getMeanValues(subjects, \"Watershed_scalar\", headers[i])\r\n        cols.push([v1, v2])\r\n    }\r\n    \r\n    /* Ajustes da tabela */\r\n\r\n    let data = [{\r\n        type: \"table\",\r\n        header: {\r\n            values: headers,\r\n            align: [\"center\"],\r\n            line: {width: 1, color: 'black'},\r\n            fill: {color: \"grey\"},\r\n            font: {family: \"Arial\", size: 14, color: \"white\"}\r\n        },\r\n        cells: {\r\n            values: cols,\r\n            height: 30,\r\n            align: [\"center\", \"center\"],\r\n            line: {width: 1, color: 'black'},\r\n            font: {family: \"Arial\", size: 12, color: \"black\"}    \r\n        }\r\n    }]\r\n\r\n    let layout = {width: \"50%\", height: 130, margin: {t: 10, b: 0, l: 10, r: 10}}\r\n\r\n    return(\r\n\r\n        <div className='table-field'>\r\n                \r\n            <div className='table-row'>\r\n                <span className='table-title'>Segmentation Data <InfoTool text=\"Comparison of the mean values ​​obtained by segmentation in each method.\"/></span>\r\n                <button className='btn-export'>Export</button>\r\n            </div>\r\n\r\n            <Plot data={data} layout={layout}/>\r\n        \r\n            <div className='options-row'>  \r\n        \r\n                <div className='select-group'>\r\n                    <label>Mode: </label>\r\n                    <select>\r\n                        <option>Overall</option>\r\n                    </select>\r\n                </div>\r\n        \r\n                <div className='select-group'>\r\n                    <label>Std. Dev: </label>\r\n                    <select onChange={changeShow} id=\"show\">\r\n                        <option value=\"hide\">Hide</option>\r\n                        <option value=\"show\">Show</option>\r\n                    </select>\r\n                </div>\r\n        \r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TableSegmentation","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Table\\TableParcellation.jsx",["112"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport './TableParcellation.scss'\r\n\r\nimport InfoTool from '../../components/InfoTool/InfoTool'\r\n\r\nfunction getMeanValues(subjects, method, parc_method, scalar, part){\r\n    let name = `${parc_method}_${scalar}_${part}`\r\n    let value = 0\r\n    subjects.map((subject) => {\r\n        return(\r\n            value += subject[method][name]\r\n        )\r\n    })\r\n\r\n    value /= (subjects.length);\r\n    return value.toFixed(6)\r\n}\r\n\r\nfunction TableParcellation(props) {\r\n\r\n    const [methodParcellation, setMethodParcellation] = useState(\"Witelson\")\r\n    const [scalar, setScalar] = useState(\"FA\")\r\n\r\n    function changeMethod(){\r\n        let value = document.querySelector(\"#methodValue\").value\r\n        setMethodParcellation(value)\r\n    }\r\n\r\n    function changeScalar(){\r\n        let value = document.querySelector(\"#scalarValueParcellation\").value\r\n        setScalar(value)\r\n    }\r\n\r\n    let headers = [\"Method\", \"P1\", \"P2\", \"P3\", \"P4\", \"P5\"]\r\n    let subjects = props.data\r\n\r\n    let cols = [[\"ROQS\", \"Watershed\", \"Joany\"]]\r\n\r\n    for(let i = 1; i != headers.length; i++){\r\n        let v1 = getMeanValues(subjects, \"ROQS_parcellation\", methodParcellation, scalar, headers[i])\r\n        let v2 = getMeanValues(subjects, \"Watershed_parcellation\", methodParcellation, scalar, headers[i])\r\n        cols.push([v1, v2])\r\n    }\r\n    \r\n\r\n    let data = [{\r\n        type: \"table\",\r\n        header: {\r\n            values: headers,\r\n            align: [\"center\"],\r\n            line: {width: 1, color: 'black'},\r\n            fill: {color: \"grey\"},\r\n            font: {family: \"Arial\", size: 14, color: \"white\"}\r\n        },\r\n        cells: {\r\n            values: cols,\r\n            height: 30,\r\n            align: [\"center\", \"center\"],\r\n            line: {width: 1, color: 'black'},\r\n            font: {family: \"Arial\", size: 12, color: \"black\"}    \r\n        }\r\n    }]\r\n\r\n    let layout = {width: \"50%\", height: 130, margin: {t: 10, b: 0, l: 10, r: 10}}\r\n\r\n    return (\r\n        <div className='table-field'>\r\n                \r\n            <div className='table-row'>\r\n                <span className='table-title'>Parcellation Data <InfoTool text=\"Comparison of the average of the values ​​obtained from each part by the installment in each method.\"/></span>\r\n                <button className='btn-export'>Export</button>\r\n            </div>\r\n\r\n            <Plot data={data} layout={layout}/>\r\n\r\n            <div className='options-row'>  \r\n        \r\n                <div className='select-group'>\r\n                    <label>Mode: </label>\r\n                    <select>\r\n                        <option>Overall</option>\r\n                    </select>\r\n                </div>\r\n        \r\n                <div className='select-group'>\r\n                    <label>Parc. Method: </label>\r\n                    <select id=\"methodValue\" onChange={changeMethod}>\r\n                        <option value=\"Witelson\">Witelson</option>\r\n                        <option value=\"Hofer\">Hofer</option>\r\n                        <option value=\"Chao\">Chao</option>\r\n                        <option value=\"Cover\">Cover</option>\r\n                        <option value=\"Freesurfer\">Freesurfer</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='select-group'>\r\n                    <label>Scalar: </label>\r\n                    <select id=\"scalarValueParcellation\" onChange={changeScalar}>\r\n                        <option value=\"FA\">FA</option>\r\n                        <option value=\"RD\">RD</option>\r\n                        <option value=\"AD\">AD</option>\r\n                        <option value=\"MD\">MD</option>\r\n                    </select>\r\n                </div>\r\n        \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableParcellation","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Boxplot\\Boxplot.jsx",[],"C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Boxplot\\BoxplotSegmentation.jsx",["113"],"import React from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport Boxplot from './Boxplot'\r\nimport './BoxplotSegmentation.scss'\r\n\r\nfunction getScalarValues(data, method, scalar){\r\n    \r\n    let values = data.map((subject) => {\r\n                    return parseFloat(subject[method][scalar].toFixed(6))\r\n                })\r\n\r\n    return values\r\n}\r\n\r\nfunction BoxplotSegmentation(props) {\r\n\r\n    return (\r\n        <div className='boxplot-container'>\r\n            <span className='boxplot-title'>Segmentation Boxplots</span>\r\n\r\n            <div className='boxplot-row'>\r\n\r\n                <Boxplot title=\"FA\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"FA\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"FA\")} width=\"375\"/>\r\n                <Boxplot title=\"MD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"MD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"MD\")} width=\"375\"/>\r\n                <Boxplot title=\"RD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"RD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"RD\")} width=\"375\"/>\r\n                <Boxplot title=\"AD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"AD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"AD\")} width=\"375\"/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoxplotSegmentation","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Boxplot\\BoxplotParcellation.jsx",["114"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport Boxplot from './Boxplot'\r\nimport './BoxplotParcellation.scss'\r\n\r\nfunction getScalarValues(subjects, method, parc_method, scalar, part){\r\n\r\n    let name = `${parc_method}_${scalar}_${part}`\r\n    let values = subjects.map((subject) => {\r\n                    return subject[method][name]\r\n                })\r\n    return values\r\n}\r\n\r\nfunction BoxplotParcellation(props) {\r\n\r\n    let [methodParcellation, setMethodParcellation] = useState(\"Witelson\")\r\n    let [scalarParcellation, setScalarParcellation] = useState(\"FA\")\r\n\r\n    function changeMethod(){\r\n        let value = document.querySelector(\"#methodParcellationValue\").value\r\n        setMethodParcellation(value)\r\n    }\r\n\r\n    function changeScalarParcellation(){\r\n        let value = document.querySelector(\"#parcellationSelect\").value\r\n        console.log(value)\r\n        setScalarParcellation(value)\r\n    }\r\n    \r\n    return (\r\n\r\n        <div className='boxplot-container'>\r\n            <span className='boxplot-title'>Parcellation Boxplots</span>\r\n\r\n            <div className='boxplot-row'>\r\n\r\n                <Boxplot title=\"P1\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P1\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P1\")} width=\"300\"/>\r\n                <Boxplot title=\"P2\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P2\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P2\")} width=\"300\"/>\r\n                <Boxplot title=\"P3\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P3\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P3\")} width=\"300\"/>\r\n                <Boxplot title=\"P4\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P4\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P4\")} width=\"300\"/>\r\n                <Boxplot title=\"P5\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P5\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P5\")} width=\"300\"/>\r\n\r\n            </div>\r\n\r\n            <div className='options-row'>  \r\n        \r\n                <div className='select-group'>\r\n                    <label>Parc. Method: </label>\r\n                    <select id=\"methodParcellationValue\" onChange={changeMethod}>\r\n                        <option value=\"Witelson\">Witelson</option>\r\n                        <option value=\"Hofer\">Hofer</option>\r\n                        <option value=\"Chao\">Chao</option>\r\n                        <option value=\"Cover\">Cover</option>\r\n                        <option value=\"Freesurfer\">Freesurfer</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='select-group'>\r\n                    <label>Scalar: </label>\r\n                    <select id=\"parcellationSelect\" onChange={changeScalarParcellation}>\r\n                        <option value=\"FA\">FA</option>\r\n                        <option value=\"RD\">RD</option>\r\n                        <option value=\"AD\">AD</option>\r\n                        <option value=\"MD\">MD</option>\r\n                    </select>\r\n                </div>\r\n        \r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default BoxplotParcellation","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Scatter\\Scatter.jsx",["115"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport './Scatter.scss'\r\n\r\nfunction getAllPoints(data, method, scalar){\r\n    let values = []\r\n\r\n    for(let i = 0; i != data.length; i++){\r\n        let value = data[i][method][scalar]\r\n        values.push(value)\r\n    }\r\n\r\n    return values\r\n}\r\n\r\nfunction Scatter(props) {\r\n\r\n    const [scalarX, setScalarX] = useState(\"FA\")\r\n    const [scalarY, setScalarY] = useState(\"MD\")\r\n\r\n    function changeScalarX(){\r\n        let value = document.querySelector(\"#scalarValueX\").value\r\n        setScalarX(value)\r\n    }\r\n\r\n    function changeScalarY(){\r\n        let value = document.querySelector(\"#scalarValueY\").value\r\n        setScalarY(value)\r\n    }\r\n\r\n    let watershed = {\r\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarX),\r\n        y: getAllPoints(props.data, \"Watershed_scalar\", scalarY),\r\n        mode: \"markers\",\r\n        type: \"scatter\",\r\n        name: \"Watershed\"\r\n    }\r\n\r\n    let roqs = {\r\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarX),\r\n        y: getAllPoints(props.data, \"ROQS_scalar\", scalarY),\r\n        mode: \"markers\",\r\n        type: \"scatter\",\r\n        name: \"ROQS\"\r\n    }\r\n\r\n    let watershedHistogramX = {\r\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarX),\r\n        type: \"histogram\",\r\n        name: \"Watershed\",\r\n        opacity: 0.5\r\n    }\r\n\r\n    let ROQSHistogramX = {\r\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarX),\r\n        type: \"histogram\",\r\n        name: \"ROQS\",\r\n        opacity: 0.5\r\n    }\r\n\r\n    let watershedHistogramY = {\r\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarY),\r\n        type: \"histogram\",\r\n        name: \"Watershed\",\r\n        opacity: 0.5\r\n    }\r\n\r\n    let ROQSHistogramY = {\r\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarY),\r\n        type: \"histogram\",\r\n        name: \"ROQS\",\r\n        opacity: 0.5\r\n    }\r\n\r\n    let dataHistogramX = [watershedHistogramX, ROQSHistogramX]\r\n    let dataHistogramY = [watershedHistogramY, ROQSHistogramY]\r\n    let data = [watershed, roqs]\r\n    \r\n    let layoutHistogramX = {\r\n        barmode: \"overlay\",\r\n        width: 800,\r\n        height: 280,\r\n        margin: {t: 30, b: 0},\r\n        title: `Scalar: ${scalarX}`\r\n    }\r\n\r\n    let layoutHistogramY = {\r\n        barmode: \"overlay\",\r\n        width: 800,\r\n        height: 280,\r\n        margin: {t: 30, b: 0},\r\n        title: `Scalar: ${scalarY}`\r\n    }\r\n\r\n    let layout = {\r\n                plot_bgcolor: '#E5ECF6',\r\n                height: 700,\r\n                margin: {t: 10},\r\n                yaxis: {gridcolor: 'rgb(255, 255, 255)', title: scalarY},\r\n                xaxis: {gridcolor: 'rgb(255, 255, 255)', title: scalarX},\r\n                legend: { orientation: \"h\" }\r\n                }\r\n\r\n    return (\r\n        <div className='scatter-container'>\r\n            \r\n            <span className='scatter-title'>Segmentation Statistics</span>\r\n\r\n            <div className='select-row'>\r\n\r\n                <div className='select-scalar'>\r\n                    <span>Scalar X</span>\r\n                    <select className='select' onChange={changeScalarX} id=\"scalarValueX\">\r\n                        <option value=\"FA\">FA</option>\r\n                        <option value=\"MD\">MD</option>\r\n                        <option value=\"RD\">RD</option>\r\n                        <option value=\"AD\">AD</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='select-scalar'>\r\n                    <span>Scalar Y</span>\r\n                    <select className='select' onChange={changeScalarY} id=\"scalarValueY\">\r\n                        <option value=\"FA\">FA</option>\r\n                        <option value=\"MD\">MD</option>\r\n                        <option value=\"RD\">RD</option>\r\n                        <option value=\"AD\">AD</option>\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className='scatter-row'>\r\n                <Plot data={data} layout={layout}/>\r\n                \r\n                <div className='scatter-col'>   \r\n                    <Plot data={dataHistogramX} layout={layoutHistogramX}/>\r\n                    <Plot data={dataHistogramY} layout={layoutHistogramY}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scatter","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Line\\Midline.jsx",["116","117","118","119","120"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport './Midline.scss'\r\n\r\nfunction getMeanPointsValue(data, method, scalar){\r\n\r\n    let size = data[0][\"Watershed_midlines\"][\"FA\"].length\r\n    let values = []\r\n\r\n    for(let p = 0; p != size; p++){\r\n        let p_sum = 0\r\n        for(let i = 0; i != data.length; i++){\r\n            p_sum += data[i][method][scalar][p]\r\n        }    \r\n        let p_value = p_sum / size\r\n        values.push(p_value)\r\n    }\r\n\r\n    return values\r\n}\r\n\r\nfunction getMeanThicknessValue(data, method){\r\n    let size = data[0][\"Watershed_thickness\"].length\r\n    let values = []\r\n\r\n    for(let p = 0; p != size; p++){\r\n        let p_sum = 0\r\n        for(let i = 0; i != data.length; i++){\r\n            p_sum += data[i][method][p]\r\n        }    \r\n        let p_value = p_sum / size\r\n        values.push(p_value)\r\n    }\r\n    return values\r\n}\r\n\r\nfunction Midline(props) {\r\n\r\n    const [scalar, setScalar] = useState(\"FA\")\r\n\r\n    function changeScalar(){\r\n        let value = document.querySelector(\"#scalarValue\").value\r\n        setScalar(value)\r\n    }\r\n\r\n    let roqs = {}\r\n    let watershed = {}\r\n\r\n    if(scalar != \"Thickness\"){\r\n        roqs = {\r\n            y: getMeanPointsValue(props.data, \"ROQS_midlines\", scalar),\r\n            modes: \"lines\",\r\n            name: \"ROQS\"\r\n        }\r\n    \r\n        watershed = {\r\n            y: getMeanPointsValue(props.data, \"Watershed_midlines\", scalar),\r\n            modes: \"lines\",\r\n            name: \"Watershed\"\r\n        }\r\n    } else{\r\n        roqs = {\r\n            y: getMeanThicknessValue(props.data, \"Watershed_thickness\"),\r\n            modes: \"lines\",\r\n            name: \"ROQS\"\r\n        }\r\n    \r\n        watershed = {\r\n            y: getMeanThicknessValue(props.data, \"ROQS_thickness\"),\r\n            modes: \"lines\",\r\n            name: \"Watershed\"\r\n        }\r\n    }\r\n\r\n    let data = [roqs, watershed]\r\n\r\n    let layout = {  \r\n                    title: \"Midline Plots\", \r\n                    height: 420, width: 660, margin: {t: 40, l: 50, r: 10}, \r\n                    legend: { orientation: \"h\" , x: 1, y: 1.1, xanchor: 'right'},\r\n                    plot_bgcolor: '#E5ECF6',\r\n                    yaxis: {\r\n                        gridcolor: 'rgb(255, 255, 255)'\r\n                    },\r\n                    xaxis: {\r\n                        gridcolor: 'rgb(255, 255, 255)',\r\n                        title: \"Points Along CC Body\"\r\n                    }\r\n                }\r\n\r\n    return (\r\n        <div className='midline-container'>\r\n            \r\n            <Plot data={data} layout={layout}/>\r\n\r\n            <div className='select-scalar'>\r\n                <span>Scalar</span>\r\n                <select className='select' onChange={changeScalar} id=\"scalarValue\">\r\n                    <option value=\"FA\">FA</option>\r\n                    <option value=\"MD\">MD</option>\r\n                    <option value=\"RD\">RD</option>\r\n                    <option value=\"AD\">AD</option>\r\n                    <option value=\"Thickness\">Thickness</option>\r\n                </select>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Midline","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\graphs\\Radar\\Radar.jsx",["121"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport './Radar.scss'\r\n\r\nfunction getMeanValues(subjects, method, parc_method, scalar, part){\r\n    let name = `${parc_method}_${scalar}_${part}`\r\n    let value = 0\r\n    subjects.map((subject) => {\r\n        return(\r\n            value += subject[method][name]\r\n        )\r\n    })\r\n\r\n    value /= (subjects.length);\r\n    return parseFloat(value.toFixed(6))\r\n}\r\n\r\nfunction getAllValues(subjects, method, parc_method, scalar){\r\n    let values = []\r\n    for(let i = 1; i != 6; i++){\r\n        values.push(getMeanValues(subjects, method, parc_method, scalar, `P${i}`))\r\n    }\r\n    return values\r\n}\r\n\r\nfunction Radar(props) {\r\n    const [methodRadar, setMethodRadar] = useState(\"Witelson\")\r\n    const [scalarRadar, setScalarRadar] = useState(\"FA\")\r\n\r\n    function changeMethodRadar(){\r\n        let value = document.querySelector(\"#methodRadar\").value\r\n        setMethodRadar(value)\r\n    }\r\n\r\n    function changeScalarRadar(){\r\n        let value = document.querySelector(\"#scalarRadar\").value\r\n        setScalarRadar(value)\r\n    }\r\n\r\n    let watershed = {\r\n        type: 'scatterpolar',\r\n        r: getAllValues(props.data, \"Watershed_parcellation\", methodRadar, scalarRadar),\r\n        theta: ['P1', 'P2','P3', 'P4', 'P5'],\r\n        fill: 'toself',\r\n        name: \"Watershed\"\r\n    }\r\n\r\n    let roqs = {\r\n        type: 'scatterpolar',\r\n        r: getAllValues(props.data, \"ROQS_parcellation\", methodRadar, scalarRadar),\r\n        theta: ['P1', 'P2','P3', 'P4', 'P5'],\r\n        fill: 'toself',\r\n        name: \"ROQS\"\r\n    }\r\n\r\n    let data = [watershed, roqs]\r\n\r\n    let layout = {\r\n        title: \"Radar Parcellation\",\r\n        legend: {orientation: \"h\"},\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='radar-container'>\r\n            <Plot data={data} layout={layout}/>\r\n            \r\n            <div className='options-col'>  \r\n        \r\n                <div className='select-group'>\r\n                    <label>Parc. Method: </label>\r\n                    <select id=\"methodRadar\" onChange={changeMethodRadar}>\r\n                        <option value=\"Witelson\">Witelson</option>\r\n                        <option value=\"Hofer\">Hofer</option>\r\n                        <option value=\"Chao\">Chao</option>\r\n                        <option value=\"Cover\">Cover</option>\r\n                        <option value=\"Freesurfer\">Freesurfer</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='select-group'>\r\n                    <label>Scalar: </label>\r\n                    <select id=\"scalarRadar\" onChange={changeScalarRadar}>\r\n                        <option value=\"FA\">FA</option>\r\n                        <option value=\"RD\">RD</option>\r\n                        <option value=\"AD\">AD</option>\r\n                        <option value=\"MD\">MD</option>\r\n                    </select>\r\n                </div>\r\n        \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Radar","C:\\Users\\Usuario\\Desktop\\Unicamp\\Reinccsight\\project\\src\\components\\InfoTool\\InfoTool.jsx",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":12},{"ruleId":"126","severity":1,"message":"130","line":12,"column":14,"nodeType":"128","messageId":"129","endLine":12,"endColumn":22},{"ruleId":"126","severity":1,"message":"131","line":27,"column":8,"nodeType":"128","messageId":"129","endLine":27,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":49,"column":17,"nodeType":"134","messageId":"135","endLine":49,"endColumn":19},{"ruleId":"136","severity":1,"message":"137","line":53,"column":32,"nodeType":"138","messageId":"139","endLine":53,"endColumn":34},{"ruleId":"132","severity":1,"message":"133","line":53,"column":53,"nodeType":"134","messageId":"135","endLine":53,"endColumn":55},{"ruleId":"140","severity":1,"message":"141","line":75,"column":21,"nodeType":"142","endLine":75,"endColumn":59},{"ruleId":"136","severity":1,"message":"143","line":112,"column":52,"nodeType":"138","messageId":"144","endLine":112,"endColumn":54},{"ruleId":"126","severity":1,"message":"145","line":10,"column":8,"nodeType":"128","messageId":"129","endLine":10,"endColumn":14},{"ruleId":"136","severity":1,"message":"137","line":29,"column":24,"nodeType":"138","messageId":"139","endLine":29,"endColumn":26},{"ruleId":"132","severity":1,"message":"133","line":30,"column":38,"nodeType":"134","messageId":"135","endLine":30,"endColumn":40},{"ruleId":"132","severity":1,"message":"133","line":33,"column":33,"nodeType":"134","messageId":"135","endLine":33,"endColumn":35},{"ruleId":"136","severity":1,"message":"137","line":48,"column":24,"nodeType":"138","messageId":"139","endLine":48,"endColumn":26},{"ruleId":"132","severity":1,"message":"146","line":49,"column":26,"nodeType":"134","messageId":"135","endLine":49,"endColumn":28},{"ruleId":"132","severity":1,"message":"146","line":55,"column":22,"nodeType":"134","messageId":"135","endLine":55,"endColumn":24},{"ruleId":"126","severity":1,"message":"147","line":6,"column":12,"nodeType":"128","messageId":"129","endLine":6,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":11,"column":17,"nodeType":"134","messageId":"135","endLine":11,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":30,"column":13,"nodeType":"134","messageId":"135","endLine":30,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":32,"column":20,"nodeType":"134","messageId":"135","endLine":32,"endColumn":22},{"ruleId":"132","severity":1,"message":"146","line":38,"column":22,"nodeType":"134","messageId":"135","endLine":38,"endColumn":24},{"ruleId":"132","severity":1,"message":"146","line":40,"column":22,"nodeType":"134","messageId":"135","endLine":40,"endColumn":24},{"ruleId":"126","severity":1,"message":"148","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":12},{"ruleId":"126","severity":1,"message":"148","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":12},{"ruleId":"132","severity":1,"message":"146","line":8,"column":22,"nodeType":"134","messageId":"135","endLine":8,"endColumn":24},{"ruleId":"132","severity":1,"message":"146","line":10,"column":22,"nodeType":"134","messageId":"135","endLine":10,"endColumn":24},{"ruleId":"132","severity":1,"message":"146","line":12,"column":26,"nodeType":"134","messageId":"135","endLine":12,"endColumn":28},{"ruleId":"132","severity":1,"message":"146","line":26,"column":22,"nodeType":"134","messageId":"135","endLine":26,"endColumn":24},{"ruleId":"132","severity":1,"message":"146","line":28,"column":26,"nodeType":"134","messageId":"135","endLine":28,"endColumn":28},{"ruleId":"132","severity":1,"message":"146","line":49,"column":15,"nodeType":"134","messageId":"135","endLine":49,"endColumn":17},{"ruleId":"132","severity":1,"message":"146","line":20,"column":22,"nodeType":"134","messageId":"135","endLine":20,"endColumn":24},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'addGroup' is defined but never used.","'Painel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Violin' is defined but never used.","Expected '!==' and instead saw '!='.","'method' is assigned a value but never used.","'Plot' is defined but never used.","no-global-assign","no-unsafe-negation"]